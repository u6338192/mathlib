/-
Copyright (c) 2019 Robert A. Spencer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robert A. Spencer, Markus Himmel
-/
import algebra.module
import algebra.punit_instances
import category_theory.concrete_category
import category_theory.limits.shapes.zero
import category_theory.limits.shapes.kernels
import linear_algebra.basic
open category_theory
open category_theory.limits
open category_theory.limits.walking_parallel_pair

universe u

variables (R : Type u) [ring R]

/-- The category of R-modules and their morphisms. -/
structure Module :=
(carrier : Type u)
[is_add_comm_group : add_comm_group carrier]
[is_module : module R carrier]

attribute [instance] Module.is_add_comm_group Module.is_module

namespace Module

-- TODO revisit this after #1438 merges, to check coercions and instances are handled consistently
instance : has_coe_to_sort (Module R) :=
{ S := Type u, coe := Module.carrier }

instance : concrete_category (Module.{u} R) :=
{ to_category :=
  { hom   := Œª M N, M ‚Üí‚Çó[R] N,
    id    := Œª M, 1,
    comp  := Œª A B C f g, g.comp f },
  forget := { obj := Œª R, R, map := Œª R S f, (f : R ‚Üí S) },
  forget_faithful := { } }

/-- The object in the category of R-modules associated to an R-module -/
def of (X : Type u) [add_comm_group X] [module R X] : Module R := ‚ü®R, X‚ü©

instance : inhabited (Module R) := ‚ü®of R punit‚ü©

lemma of_apply (X : Type u) [add_comm_group X] [module R X] : (of R X : Type u) = X := rfl

instance : subsingleton (of R punit) :=
by { rw of_apply R punit, apply_instance }

instance : has_zero_object.{u} (Module R) :=
{ zero := of R punit,
  unique_to := Œª X,
  { default := (0 : punit ‚Üí‚Çó[R] X),
    uniq := Œª _, linear_map.ext $ Œª x,
      have h : x = 0, from subsingleton.elim _ _,
      by simp [h] },
  unique_from := Œª X,
  { default := (0 : X ‚Üí‚Çó[R] punit),
    uniq := Œª _, linear_map.ext $ Œª x, subsingleton.elim _ _ } }

variables (M N U : Module R)

@[simp] lemma id_apply (m : M) : (ùüô M : M ‚Üí M) m = m := rfl

@[simp] lemma coe_comp (f : M ‚ü∂ N) (g : N ‚ü∂ U) :
  ((f ‚â´ g) : M ‚Üí U) = g ‚àò f := rfl

instance hom_is_module_hom {M‚ÇÅ M‚ÇÇ : Module R} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) :
  is_linear_map R (f : M‚ÇÅ ‚Üí M‚ÇÇ) := linear_map.is_linear _

section kernel
variable (f : M ‚ü∂ N)

local attribute [instance] has_zero_object.zero_morphisms_of_zero_object

/-- The cone on the equalizer diagram of f and 0 induced by the kernel of f -/
def kernel_cone : cone (parallel_pair f 0) :=
{ X := of R f.ker,
  œÄ :=
  { app := Œª j,
    match j with
    | zero := f.ker.subtype
    | one := 0
    end,
    naturality' := Œª j j' g, by { cases j; cases j'; cases g; tidy } } }

/-- The kernel of a linear map is a kernel in the categorical sense -/
def kernel_is_limit : is_limit (kernel_cone _ _ _ f) :=
{ lift := Œª s, linear_map.cod_restrict f.ker (fork.Œπ s) (Œª c, linear_map.mem_ker.2 $
  by { erw [‚Üê@function.comp_apply _ _ _ f (fork.Œπ s) c, ‚Üêcoe_comp, fork.condition,
    has_zero_morphisms.comp_zero _ (fork.Œπ s) N], refl }),
  fac' := Œª s j, linear_map.ext $ Œª x,
  begin
    rw [coe_comp, function.comp_app, ‚Üêlinear_map.comp_apply],
    cases j,
    { erw @linear_map.subtype_comp_cod_restrict _ _ _ _ _ _ _ _ (fork.Œπ s) f.ker _, refl },
    { rw [‚Üêcone_parallel_pair_right, ‚Üêcone_parallel_pair_right], refl }
  end,
  uniq' := Œª s m h, linear_map.ext $ Œª x, subtype.ext.2 $
    have h‚ÇÅ : (m ‚â´ (kernel_cone _ _ _ f).œÄ.app zero).to_fun = (s.œÄ.app zero).to_fun,
    by { congr, exact h zero },
    by convert @congr_fun _ _ _ _ h‚ÇÅ x }

end kernel

local attribute [instance] has_zero_object.zero_morphisms_of_zero_object

instance : has_kernels.{u} (Module R) :=
‚ü®Œª _ _ f, ‚ü®kernel_cone _ _ _ f, kernel_is_limit _ _ _ f‚ü©‚ü©

end Module

instance (M : Type u) [add_comm_group M] [module R M] : has_coe (submodule R M) (Module R) :=
‚ü® Œª N, Module.of R N ‚ü©
